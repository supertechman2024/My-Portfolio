{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Assignment 2**\n",
        "\n",
        "Bradley Dudwell\n",
        "\n",
        "\t23047566\n"
      ],
      "metadata": {
        "id": "2io0COaAlnMB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import os\n",
        "import sys\n",
        "import json\n",
        "from datetime import datetime\n",
        "from typing import List\n",
        "\n",
        "# Define the cf() function for handling file paths in different environments\n",
        "# Pre-condition: The function expects a valid filename as input.\n",
        "# Post-condition: Returns the full file path by combining the filename with the appropriate directory path.\n",
        "\n",
        "def cf(filename):\n",
        "    if 'google.colab' in sys.modules:\n",
        "        if not os.path.exists('/content/drive'):\n",
        "            from google.colab import drive\n",
        "            drive.mount('/content/drive')\n",
        "        PATH = '/content/drive/MyDrive/'\n",
        "        return os.path.join(PATH, filename)\n",
        "    else:\n",
        "        return os.path.join(os.getcwd(), filename)\n",
        "\n",
        "# Mount the required files\n",
        "books_file = cf('books_2023.csv')\n",
        "book_loans_file = cf('bookloans_2023.csv')\n",
        "members_file = cf('members_2023.csv')\n",
        "\n",
        "print(\"Books file path:\", books_file)\n",
        "print(\"Book loans file path:\", book_loans_file)\n",
        "print(\"Members file path:\", members_file)\n",
        "\n",
        "# Function to read CSV and convert to JSON\n",
        "def csv_to_json(csv_file, json_file):\n",
        "    try:\n",
        "        with open(csv_file, 'r', encoding='utf-8-sig') as csvfile:\n",
        "            csvreader = csv.DictReader(csvfile)\n",
        "            data = [row for row in csvreader]\n",
        "        with open(json_file, 'w') as jsonfile:\n",
        "            json.dump(data, jsonfile, indent=4)\n",
        "        return True\n",
        "    except FileNotFoundError as e:\n",
        "        print(f\"File '{csv_file}' not found: {e}\")\n",
        "        return False\n",
        "    except PermissionError as e:\n",
        "        print(f\"Permission denied for file '{csv_file}': {e}\")\n",
        "        return False\n",
        "\n",
        "# Function to load JSON data from a file\n",
        "def load_json(json_file):\n",
        "    try:\n",
        "        with open(json_file, 'r') as file:\n",
        "            data = json.load(file)\n",
        "        return data\n",
        "    except FileNotFoundError as e:\n",
        "        print(f\"File '{json_file}' not found: {e}\")\n",
        "        return None\n",
        "\n",
        "# Function to save JSON data to a file\n",
        "def save_json(json_file, data):\n",
        "    try:\n",
        "        with open(json_file, 'w') as file:\n",
        "            json.dump(data, file, indent=4)\n",
        "        return True\n",
        "    except PermissionError as e:\n",
        "        print(f\"Permission denied for file '{json_file}': {e}\")\n",
        "        return False\n",
        "\n",
        "# Read CSV files into dictionaries and convert to JSON\n",
        "for csv_file, json_file in zip([books_file, book_loans_file, members_file],\n",
        "                               ['books_2023.json', 'bookloans_2023.json', 'members_2023.json']):\n",
        "    csv_to_json(csv_file, json_file)\n",
        "\n",
        "print(\"Conversion complete!\")\n",
        "\n",
        "class FakeSMTPServer:\n",
        "    def __init__(self):\n",
        "        self.sent_emails = []\n",
        "\n",
        "    def sendmail(self, from_addr: str, to_addrs: str, msg: str):\n",
        "        self.sent_emails.append({'from': from_addr, 'to': to_addrs, 'msg': msg})\n",
        "\n",
        "    def print_sent_emails(self):\n",
        "        for email in self.sent_emails:\n",
        "            print(\"From: {}\".format(email['from']))\n",
        "            print(\"To: {}\".format(email['to']))\n",
        "            print(\"Message: {}\".format(email['msg']))\n",
        "            print()\n",
        "\n",
        "    def quit(self):\n",
        "        pass\n",
        "\n",
        "# Define the Observer interface\n",
        "class Observer:\n",
        "    def notify(self, message):\n",
        "        pass\n",
        "\n",
        "\n",
        "# Define a ConcreteObserver class for notifications\n",
        "class NotificationObserver(Observer):\n",
        "    def __init__(self, notification_manager):\n",
        "        self.notification_manager = notification_manager\n",
        "\n",
        "    def notify(self, message):\n",
        "        self.notification_manager.send_notification(message)\n",
        "\n",
        "class NotificationManager:\n",
        "    def __init__(self):\n",
        "        self.observers = []\n",
        "\n",
        "    def attach(self, observer):\n",
        "        self.observers.append(observer)\n",
        "\n",
        "    def detach(self, observer):\n",
        "        self.observers.remove(observer)\n",
        "\n",
        "    def send_notification(self, message):\n",
        "        for observer in self.observers:\n",
        "            observer.notify(message)\n",
        "\n",
        "def send_notification_email(member, message, fake_smtp_server):\n",
        "    \"\"\"\n",
        "    Sends a notification email to a member.\n",
        "\n",
        "    Args:\n",
        "        member (Member): The Member object to whom the email will be sent.\n",
        "        message (str): The message to include in the email.\n",
        "        fake_smtp_server (FakeSMTPServer): An instance of the FakeSMTPServer to simulate sending the email.\n",
        "    \"\"\"\n",
        "    # Set up the email content\n",
        "    subject = \"Library Notification\"\n",
        "    body = f\"Dear {member.first_name} {member.last_name},\\n\\n{message}\\n\\nSincerely,\\nThe Library Team\"\n",
        "    sender = \"library@example.com\"\n",
        "    recipient = member.email\n",
        "\n",
        "    # Send the email using the fake SMTP server\n",
        "    fake_smtp_server.sendmail(sender, recipient, body)\n",
        "\n",
        "\n",
        "\n",
        "class Book:\n",
        "    def __init__(self, number, title, author, genre, subgenre, publisher):\n",
        "        self.number = number\n",
        "        self.title = title\n",
        "        self.author = author\n",
        "        self.genre = genre\n",
        "        self.subgenre = subgenre\n",
        "        self.publisher = publisher\n",
        "\n",
        "\n",
        "    def scan(self):\n",
        "        \"\"\"Returns a dictionary containing book information.\"\"\"\n",
        "        return {\n",
        "            'Number': self.number,\n",
        "            'Title': self.title,\n",
        "            'Author': self.author,\n",
        "            'Genre': self.genre,\n",
        "            'SubGenre': self.subgenre,\n",
        "            'Publisher': self.publisher\n",
        "        }\n",
        "\n",
        "    def def_borrow(self, member):\n",
        "        \"\"\"Borrow a book for a member and record the transaction.\n",
        "\n",
        "\n",
        "        Pre-conditions:\n",
        "        - The book must be available (not already borrowed).\n",
        "        - The member object must be valid.\n",
        "\n",
        "        Post-conditions:\n",
        "        - If successful, a transaction record is created.\n",
        "        - If unsuccessful, an error message is returned.\n",
        "\n",
        "\n",
        "        Args:\n",
        "            member (Member): The member borrowing the book.\n",
        "\n",
        "        Returns:\n",
        "            str: A message indicating the result of the borrowing operation.\n",
        "        \"\"\"\n",
        "        loan_data = load_json('bookloans_2023.json')\n",
        "\n",
        "        # Check if the book is available (not already borrowed)\n",
        "        for transaction in loan_data:\n",
        "            if (\n",
        "                transaction.get('Book ID') == self.number  # Use the book's ID\n",
        "                and transaction.get('Member ID') == member.ID  # Use the member's ID\n",
        "                and transaction.get('End Date') is None\n",
        "            ):\n",
        "                return f\"The book '{self.title}' is already borrowed by {member.first_name} {member.last_name}.\"\n",
        "\n",
        "        # Record the borrowing transaction\n",
        "        transaction_data = {\n",
        "            'Book ID': self.number,  # Use the book's ID\n",
        "            'Member ID': member.ID,  # Use the member's ID\n",
        "            'Start Date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n",
        "            'End Date': None  # You can update the end date when the book is returned\n",
        "        }\n",
        "        loan_data.append(transaction_data)\n",
        "        save_json('bookloans_2023.json', loan_data)\n",
        "\n",
        "        return f\"Successfully borrowed '{self.title}' by {self.author}.\"\n",
        "\n",
        "    def def_return(self, member, notification):\n",
        "        \"\"\"Return a borrowed book and update the JSON file with the end date.\n",
        "\n",
        "        Pre-conditions:\n",
        "        - The book must have been borrowed by the specified member.\n",
        "        - The member object must be valid.\n",
        "\n",
        "        Post-conditions:\n",
        "        - If successful, the end date of the transaction is updated.\n",
        "        - If late, a fine notification is sent.\n",
        "        - If unsuccessful, an error message is returned.\n",
        "\n",
        "\n",
        "        Args:\n",
        "            member (Member): The member returning the book.\n",
        "            fake_smtp_server (FakeSMTPServer): The fake SMTP server instance for sending notifications.\n",
        "\n",
        "\n",
        "        Returns:\n",
        "            str: A message indicating the result of the return operation.\n",
        "        \"\"\"\n",
        "        loan_data = load_json('bookloans_2023.json')\n",
        "\n",
        "        # Find the transaction for the book borrowed by the member\n",
        "        found_transaction = None\n",
        "        for transaction in loan_data:\n",
        "            if (\n",
        "                transaction.get('Book ID') == self.number\n",
        "                and transaction.get('Member ID') == member.ID\n",
        "                and transaction.get('End Date') is None\n",
        "            ):\n",
        "                found_transaction = transaction\n",
        "                break\n",
        "\n",
        "        if found_transaction:\n",
        "            # Update the end date with the current date and time\n",
        "            found_transaction['End Date'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
        "            save_json('bookloans_2023.json', loan_data)\n",
        "\n",
        "            # Calculate the late return days\n",
        "            start_date = datetime.strptime(found_transaction['Start Date'], '%Y-%m-%d %H:%M:%S')\n",
        "            end_date = datetime.strptime(found_transaction['End Date'], '%Y-%m-%d %H:%M:%S')\n",
        "            late_return_days = (end_date - start_date).days - 19  # Updated to 19 days late\n",
        "\n",
        "            # Calculate the fine amount based on the late return condition\n",
        "            late_return_fine = 0\n",
        "            if late_return_days > 0:\n",
        "                late_return_fine = 5  # £5 for returning 19 days late\n",
        "\n",
        "            # Check if a fine was triggered and send an email notification\n",
        "            if late_return_fine > 0:\n",
        "                message = f\"You have returned '{self.title}' by {self.author} {late_return_days} days late. Fine: £{late_return_fine}.\"\n",
        "                send_notification_email(member, message, fake_smtp_server)\n",
        "\n",
        "\n",
        "\n",
        "            return f\"Successfully returned '{self.title}' by {self.author}. Late by {late_return_days} days. Fine: £{late_return_fine}.\"\n",
        "        else:\n",
        "            return f\"The book '{self.title}' is not currently borrowed by {member.first_name} {member.last_name}.\"\n",
        "\n",
        "    def is_available_for_reservation(self):\n",
        "        \"\"\"Check if the book is available for reservation.\n",
        "\n",
        "        Args:\n",
        "        fake_smtp_server (FakeSMTPServer): The fake SMTP server instance for sending notifications.\n",
        "\n",
        "        Returns:\n",
        "            bool: True if the book can be reserved, False otherwise.\n",
        "        \"\"\"\n",
        "        loan_data = load_json('bookloans_2023.json')\n",
        "\n",
        "        # Check if the book is currently borrowed (has no end date)\n",
        "        for transaction in loan_data:\n",
        "            if (\n",
        "                transaction.get('Book ID') == self.number\n",
        "                and transaction.get('End Date') is None\n",
        "            ):\n",
        "                return True  # Book is currently borrowed and available for reservation\n",
        "\n",
        "        if not self.reserved:\n",
        "         # Book can be reserved if not already reserved, send a notification email\n",
        "         message = f\"The book '{self.title}' by {self.author} is now available for reservation.\"\n",
        "         send_notification_email(fake_smtp_server, message)\n",
        "\n",
        "\n",
        "        return not self.reserved  # Book can be reserved if not already reserved\n",
        "\n",
        "    def reserve_book(self, member):\n",
        "        \"\"\"Reserve a book for a member and update the 'reserved.json' file with the reservation.\n",
        "\n",
        "        Args:\n",
        "            member (Member): The member reserving the book.\n",
        "\n",
        "        Returns:\n",
        "            str: A message indicating the result of the reservation operation.\n",
        "        \"\"\"\n",
        "        if not self.is_available_for_reservation():\n",
        "            return f\"The book '{self.title}' is not currently available for reservation.\"\n",
        "\n",
        "        # Create a reservation record\n",
        "        reservation_data = {\n",
        "            'Member ID': member.ID,\n",
        "            'Member First Name': member.first_name,\n",
        "            'Book Number': self.number,\n",
        "            'Book Name': self.title,\n",
        "            'Date of Reserve': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n",
        "        }\n",
        "\n",
        "        # Append the reservation data to the 'reserved.json' file\n",
        "        reserved_data = load_json('reserved.json') or []\n",
        "        reserved_data.append(reservation_data)\n",
        "        save_json('reserved.json', reserved_data)\n",
        "\n",
        "        # Update the book status as reserved\n",
        "        self.reserved = True\n",
        "\n",
        "        return f\"Successfully reserved '{self.title}' by {self.author} for {member.first_name} {member.last_name}.\"\n",
        "\n",
        "class Member:\n",
        "    def __init__(self, ID, first_name, last_name, gender, email, card_number):\n",
        "        self.ID = ID\n",
        "        self.first_name = first_name\n",
        "        self.last_name = last_name\n",
        "        self.gender = gender\n",
        "        self.email = email\n",
        "        self.card_number = card_number\n",
        "\n",
        "    def scan(self):\n",
        "        \"\"\"Returns the member ID.\"\"\"\n",
        "        return self.ID\n",
        "\n",
        "class Notification:\n",
        "    def __init__(self, smtp_server):\n",
        "        self.smtp_server = smtp_server\n",
        "\n",
        "    def send_notification_email(self, member: Member, message: str):\n",
        "        \"\"\"\n",
        "        Sends a notification email to a member.\n",
        "\n",
        "        Args:\n",
        "            member (Member): The Member object to whom the email will be sent.\n",
        "            message (str): The message to include in the email.\n",
        "        \"\"\"\n",
        "        # Set up the email content\n",
        "        subject = \"Library Notification\"\n",
        "        body = f\"Dear {member.first_name} {member.last_name},\\n\\n{message}\\n\\nSincerely,\\nThe Library Team\"\n",
        "        from_email = \"library@example.com\"\n",
        "        to_email = member.email\n",
        "\n",
        "        # Send the email using the SMTP server\n",
        "        self.smtp_server.sendmail(from_email, to_email, body)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "     # Initialise the FakeSMTPServer for email simulation\n",
        "    fake_smtp_server = FakeSMTPServer()\n",
        "\n",
        "    # Sample data for testing\n",
        "    book_to_borrow = Book(number='52', title='In A Free State', author='V. S. Naipaul', genre='Fiction',\n",
        "                        subgenre='Novel', publisher='Rupa')\n",
        "    member_borrowing = Member(ID='1', first_name='Adelaide', last_name='Cunningham', gender='Female',\n",
        "                            email='a.cunningham@randatmail.com', card_number='1-13')\n",
        "\n",
        "    # To borrow the book\n",
        "    borrow_result = book_to_borrow.def_borrow(member_borrowing)\n",
        "    print(borrow_result)\n",
        "\n",
        "    # To return the book\n",
        "    return_result = book_to_borrow.def_return(member_borrowing, notification_instance)\n",
        "    print(return_result)\n",
        "\n",
        "# Sample data for testing\n",
        "book_to_borrow = Book(number='53', title='Catch 22', author='Joseph Heller', genre='Fiction',\n",
        "                      subgenre='Classic', publisher='Random House')\n",
        "member_borrowing = Member(ID='2', first_name='Charlie', last_name='Roberts', gender='Male',\n",
        "                          email='c.roberts@randatmail.com', card_number='2-22')\n",
        "member_reserving = Member(ID='4', first_name='Cadie', last_name='Hall', gender='Female',\n",
        "                          email='c.hall@randatmail.com', card_number='4-43')\n",
        "\n",
        "# To borrow the book\n",
        "borrow_result = book_to_borrow.def_borrow(member_borrowing)\n",
        "print(borrow_result)\n",
        "\n",
        "# To reserve the book\n",
        "reserve_result = book_to_borrow.reserve_book(member_reserving)\n",
        "print(reserve_result)\n",
        "\n",
        "# Load and print the contents of 'reserved.json'\n",
        "reserved_data = load_json('reserved.json')\n",
        "if reserved_data:\n",
        "    print(\"Contents of 'reserved.json':\")\n",
        "    for reservation in reserved_data:\n",
        "        print(reservation)\n",
        "\n",
        "#empty_data = []\n",
        "#save_json('reserved.json', empty_data)\n",
        "\n",
        "# Define a message for the notification\n",
        "notification_message = \"You have triggered a £5 fine for returning a book 5 days late.\"\n",
        "\n",
        "# Create a FakeSMTPServer instance\n",
        "fake_smtp_server = FakeSMTPServer()\n",
        "\n",
        "# Create a Member instance (replace with actual member data)\n",
        "member = Member(ID='4', first_name='Cadie', last_name='Hall', gender='Female', email='c.hall@randatmail.com', card_number='4-43')\n",
        "\n",
        "# Send the notification email\n",
        "send_notification_email(member, notification_message, fake_smtp_server)\n",
        "\n",
        "# Print out the sent email(s)\n",
        "fake_smtp_server.print_sent_emails()\n",
        "\n",
        "\n",
        "# Sample data for testing\n",
        "book_to_test = Book(number='55', title='To Kill a Mockingbird', author='Harper Lee', genre='Fiction',\n",
        "                    subgenre='Classic', publisher='HarperCollins')\n",
        "member_borrowing = Member(ID='5', first_name='Emma', last_name='Johnson', gender='Female',\n",
        "                          email='e.johnson@randatmail.com', card_number='5-55')\n",
        "\n",
        "# To borrow the book\n",
        "borrow_result = book_to_test.def_borrow(member_borrowing)\n",
        "print(borrow_result)"
      ],
      "metadata": {
        "id": "Odn_Oklr0lzM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7459e659-dc1b-42a2-cea9-72730e5cadba"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Books file path: /content/drive/MyDrive/books_2023.csv\n",
            "Book loans file path: /content/drive/MyDrive/bookloans_2023.csv\n",
            "Members file path: /content/drive/MyDrive/members_2023.csv\n",
            "Conversion complete!\n",
            "Successfully borrowed 'In A Free State' by V. S. Naipaul.\n",
            "Successfully returned 'In A Free State' by V. S. Naipaul. Late by -19 days. Fine: £0.\n",
            "Successfully borrowed 'Catch 22' by Joseph Heller.\n",
            "Successfully reserved 'Catch 22' by Joseph Heller for Cadie Hall.\n",
            "Contents of 'reserved.json':\n",
            "{'Member ID': '4', 'Member First Name': 'Cadie', 'Book Number': '53', 'Book Name': 'Catch 22', 'Date of Reserve': '2024-01-07 03:13:10'}\n",
            "From: library@example.com\n",
            "To: c.hall@randatmail.com\n",
            "Message: Dear Cadie Hall,\n",
            "\n",
            "You have triggered a £5 fine for returning a book 5 days late.\n",
            "\n",
            "Sincerely,\n",
            "The Library Team\n",
            "\n",
            "Successfully borrowed 'To Kill a Mockingbird' by Harper Lee.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import json\n",
        "from collections import defaultdict\n",
        "import random  # Import random for generating sample card numbers\n",
        "\n",
        "def parse_card_number(card_number):\n",
        "    \"\"\"\n",
        "    Parse the card number to extract the initials and card count.\n",
        "\n",
        "    Args:\n",
        "        card_number (str): The card number in the format \"XXX-YY\".\n",
        "\n",
        "    Returns:\n",
        "        str: The updated card number in the format \"XXX-YY\".\n",
        "    \"\"\"\n",
        "    initials, card_count = card_number.split('-')\n",
        "    card_count = int(card_count)\n",
        "\n",
        "    # Pre-condition: Ensure card_count is within the range of 1 to 99.\n",
        "    if card_count >= 99:\n",
        "        card_count = 1\n",
        "    else:\n",
        "        card_count += 1\n",
        "\n",
        "    updated_card_number = f\"{initials}-{card_count:02d}\"\n",
        "    return updated_card_number\n",
        "\n",
        "class MembershipSystem:\n",
        "    def __init__(self):\n",
        "        self.membership_file = 'members_2023.json'\n",
        "        self.members_data = self.load_json(self.membership_file)\n",
        "        self.card_delimiter = '-'\n",
        "\n",
        "    def load_json(self, json_file):\n",
        "        \"\"\"\n",
        "        Load JSON data from a file.\n",
        "\n",
        "        Args:\n",
        "            json_file (str): The name of the JSON file to load.\n",
        "\n",
        "        Returns:\n",
        "            list: A list of dictionaries containing the loaded JSON data.\n",
        "        \"\"\"\n",
        "        try:\n",
        "            with open(json_file, 'r') as file:\n",
        "                data = json.load(file)\n",
        "            return data\n",
        "        except FileNotFoundError:\n",
        "            return []\n",
        "\n",
        "    def save_json(self, json_file, data):\n",
        "        \"\"\"\n",
        "        Save JSON data to a file.\n",
        "\n",
        "        Args:\n",
        "            json_file (str): The name of the JSON file to save.\n",
        "            data (list): A list of dictionaries to be saved as JSON.\n",
        "\n",
        "        Post-condition: The provided data is saved to the specified JSON file.\n",
        "        \"\"\"\n",
        "        with open(json_file, 'w') as file:\n",
        "            json.dump(data, file, indent=4)\n",
        "\n",
        "    def get_new_member_id(self):\n",
        "        \"\"\"\n",
        "        Get a new member ID.\n",
        "\n",
        "        Returns:\n",
        "            str: A new member ID.\n",
        "\n",
        "        Post-condition: The returned member ID is unique and not in use by any existing member.\n",
        "        \"\"\"\n",
        "        existing_ids = {int(member['ID']) for member in self.members_data}\n",
        "        new_id = max(existing_ids) + 1 if existing_ids else 1\n",
        "        return str(new_id)\n",
        "\n",
        "    def get_next_card_number(self, member_id):\n",
        "        \"\"\"\n",
        "        Get the next available card number for a member.\n",
        "\n",
        "        Args:\n",
        "            member_id (str): The ID of the member for whom the card number is generated.\n",
        "\n",
        "        Returns:\n",
        "            str: The next available card number.\n",
        "\n",
        "        Post-condition: The returned card number is unique for the given member.\n",
        "        \"\"\"\n",
        "        member_cards = [card for card in self.members_data if card.get('MemberID') == member_id]\n",
        "        if member_cards:\n",
        "            max_card = max([int(card['CardNumber'].split(self.card_delimiter)[-1]) for card in member_cards])\n",
        "            if max_card == 99:\n",
        "                return f\"{member_id}{self.card_delimiter}1\"\n",
        "            else:\n",
        "                return f\"{member_id}{self.card_delimiter}{max_card + 1}\"\n",
        "        else:\n",
        "            return f\"{member_id}{self.card_delimiter}1\"\n",
        "\n",
        "    def issue_membership_card(self, member_data):\n",
        "        \"\"\"\n",
        "        Issue a new membership card for a member.\n",
        "\n",
        "        Args:\n",
        "            member_data (dict): A dictionary containing member information.\n",
        "\n",
        "        Returns:\n",
        "            str: A message indicating the issuance of the membership card.\n",
        "\n",
        "        Post-condition: A new membership card is issued for the member, and the data is saved to the membership file.\n",
        "        \"\"\"\n",
        "        new_member_id = self.get_new_member_id()\n",
        "        new_card_number = self.get_next_card_number(new_member_id)\n",
        "\n",
        "        new_member = {\n",
        "            'ID': new_member_id,\n",
        "            'FirstName': member_data['FirstName'],\n",
        "            'LastName': member_data['LastName'],\n",
        "            'Gender': member_data['Gender'],\n",
        "            'Email': member_data['Email'],\n",
        "            'CardNumber': new_card_number\n",
        "        }\n",
        "\n",
        "        self.members_data.append(new_member)\n",
        "        self.save_json(self.membership_file, self.members_data)\n",
        "\n",
        "        return f\"Membership card issued for {member_data['FirstName']} {member_data['LastName']}. Card Number: {new_card_number}\"\n",
        "\n",
        "    def reissue_membership_card(self, existing_member_id):\n",
        "        \"\"\"\n",
        "        Reissue a membership card for an existing member.\n",
        "\n",
        "        Args:\n",
        "            existing_member_id (str): The ID of the existing member.\n",
        "\n",
        "        Returns:\n",
        "            str: A message indicating the reissuance of the membership card.\n",
        "\n",
        "        Post-condition: The membership card for the existing member is reissued with a new Member ID and Card Number.\n",
        "        \"\"\"\n",
        "        new_member_id = self.get_new_member_id()  # Generate a new member ID\n",
        "        new_card_number = self.get_next_card_number(new_member_id)  # Generate a new card number\n",
        "\n",
        "        for member in self.members_data:\n",
        "            if member.get('ID') == existing_member_id and 'CardNumber' in member:\n",
        "                # Update the ID and CardNumber while keeping the other data unchanged\n",
        "                member['ID'] = new_member_id\n",
        "                member['CardNumber'] = new_card_number\n",
        "                break\n",
        "\n",
        "        self.save_json(self.membership_file, self.members_data)\n",
        "\n",
        "        return f\"Membership card reissued for Member ID: {existing_member_id}. New Member ID: {new_member_id}. New Card Number: {new_card_number}\"\n",
        "\n",
        "# Dummy data for testing\n",
        "membership_system = MembershipSystem()\n",
        "\n",
        "# Test issuing a new membership card\n",
        "new_member_data = {\n",
        "    'FirstName': 'John',\n",
        "    'LastName': 'Doe',\n",
        "    'Gender': 'Male',\n",
        "    'Email': 'johndoe@example.com'\n",
        "}\n",
        "print(membership_system.issue_membership_card(new_member_data))\n",
        "\n",
        "# Test reissuing a membership card\n",
        "existing_member_id = '1'  # Assuming \"1\" is the Member ID\n",
        "print(membership_system.reissue_membership_card(existing_member_id))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aREVA9Qc1nwx",
        "outputId": "eff4b34f-62fa-4e4d-8cf3-57e5fc0611c0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Membership card issued for John Doe. Card Number: 201-1\n",
            "Membership card reissued for Member ID: 1. New Member ID: 202. New Card Number: 202-1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Within my script i have introduced an observatory design pattern, using the NotificationManager class and the NotificationObserver class which allows for greater flexibility. As the application grows and more events or notifications need to be handled, you can easily add new observers (NotificationObservers) to the NotificationManager without modifying the existing code. Each observer can be responsible for a specific type of notification or event, making the system modular and extensible. The Observer pattern promotes loose coupling between the subject (e.g., Book) and the observers (e.g., NotificationObservers). This means that changes in one part of the system won't directly impact other parts, making it easier to maintain and extend the codebase. If you need to add or modify notifications in the future, you can do so without touching the Book class. The NotificationManager and NotificationObserver classes can be reused across different parts of the application. If you have other components that need to send notifications, you can simply create new observers and attach them to the manager, promoting code reuse and reducing redundancy. Future improvements that could be made are maybe to implement a configuration mechanism to specify which notifications are enabled and how they should be delivered. This allows you to enable or disable specific notifications without changing the code. You can store this configuration in a separate file or database. Also, instead of sending plain text messages in notifications, i could consider creating custom notification classes. These classes can encapsulate the message content, type, and any additional data related to the notification. This makes it easier to extend the notification system with more complex notifications in the future. I could implement a logging and auditing system to keep track of all notifications sent, including successful deliveries and failures. This can be useful for debugging and compliance purposes. Finally, i could expand the notification system to support multiple notification channels such SMS, push notifications, and more. Each channel can be implemented as an observer, and notification types can specify which channels to use. This flexibility allows for future expansion to various communication methods.\n"
      ],
      "metadata": {
        "id": "YdHHnIudiVwc"
      }
    }
  ]
}
